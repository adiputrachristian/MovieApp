//
//  DetailMoviePresenter.swift
//  MovieApp
//
//  Created by Christian Adiputra on 02/07/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation
import NetworkKit

final class DetailMoviePresenter {

    // MARK: - Private properties -

    private unowned let view: DetailMovieViewInterface
    private let interactor: DetailMovieInteractorInterface
    private let wireframe: DetailMovieWireframeInterface

    internal var movieId: Int?
    internal var page: Int = 1
    // MARK: - Lifecycle -

    init(
        view: DetailMovieViewInterface,
        interactor: DetailMovieInteractorInterface,
        wireframe: DetailMovieWireframeInterface,
        movieId: Int
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
        self.movieId = movieId
        fetchDetailData()
        fetchListReview()
    }
}

// MARK: - Extensions -

extension DetailMoviePresenter: DetailMoviePresenterInterface {
    func getTotalPages() -> Int {
        return interactor.totalPage
    }
    
    func addPage() {
        page += 1
    }
    
    func fetchListReview() {
        guard let id = self.movieId else { return }
        interactor.fetchListReview(page: page, id: id)
    }
    
    func getImage() -> URL? {
        guard let movies = interactor.detailMovie else { return nil }
        let url = URL(string: "https://image.tmdb.org/t/p/w500\(movies.posterPath)")
        return url
    }
        
    func getMovieDetail() -> Movie? {
        guard let movie = interactor.detailMovie else { return nil }
        return movie
    }
    
    func getListReview() -> [MovieReview] {
        return interactor.listReview
    }
    
    func fetchDetailData() {
        guard let id = self.movieId else { return }
        interactor.fetchDetailData(id: id)
    }
    
    func getTrailerURL() -> String? {
        guard let movie = interactor.detailMovie else { return nil }
        let trailer = movie.videos?.list.first(where: {$0.type.lowercased().contains("trailer") || $0.name.lowercased().contains("trailer") })
        let trailerId = trailer?.key ?? ""
        return trailerId
    }
    
    
}

extension DetailMoviePresenter: DetailMovieInteractorOutputInterface {
    func didFailedFetchData(message: String) {
        view.showAlert(message: message)
    }
    
    func successGetListReview() {
        self.view.updateTableView()
    }
    
    
    func successGetDetail() {
        DispatchQueue.main.async {
            self.view.updateView()
        }
        
    }
    
    
}
