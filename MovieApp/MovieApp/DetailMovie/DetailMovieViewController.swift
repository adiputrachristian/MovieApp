//
//  DetailMovieViewController.swift
//  MovieApp
//
//  Created by Christian Adiputra on 02/07/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit
import DesignKit
import SkeletonView
import AVKit
import AVFoundation
import youtube_ios_player_helper

class DetailMovieViewController: UIViewController {
    
    var scrollView: UIScrollView = {
        let scrollView = UIScrollView()
        scrollView.showsVerticalScrollIndicator = false
        scrollView.showsHorizontalScrollIndicator = false
        return scrollView
    }()
    
    var stackView: UIStackView = {
        let stackView = UIStackView()
        stackView.axis = .vertical
        return stackView
    }()
    
    var containerView: UIView = {
        let view = UIView()
        return view
    }()
    
    var tableViewContainer: UIView = {
        let view = UIView()
        view.backgroundColor = .clear
        return view
    }()
        
    var imageBanner: RoundedBottomCornersImageView = {
        let image = RoundedBottomCornersImageView()
        image.backgroundColor = .gray
        image.contentMode = .scaleAspectFill
        image.clipsToBounds = true
        image.isSkeletonable = true
        return image
    }()
    
    var titleLbl: UILabel = {
        let label = UILabel()
        label.textColor = .white
        label.numberOfLines = 0
        label.isSkeletonable = true
        label.font = UIFont.systemFont(ofSize: 24, weight: .bold)
        label.text = "-"
        return label
    }()
    
    var reviewLbl: UILabel = {
        let label = UILabel()
        label.textColor = .white
        label.numberOfLines = 0
        label.font = UIFont.systemFont(ofSize: 18, weight: .bold)
        label.text = "Review"
        return label
    }()
    
    var descLbl: UILabel = {
        let label = UILabel()
        label.textColor = .white
        label.isSkeletonable = true
        label.numberOfLines = 0
        label.font = UIFont.systemFont(ofSize: 14, weight: .regular)
        label.text = "-"
        return label
    }()
    
    var watchTrailerBtn: UIButton = {
        let button = UIButton()
        button.backgroundColor = .white
        button.setTitle("Watch Trailer", for: .normal)
        button.setTitleColor(UIColor.backgroundColor(), for: .normal)
        button.titleLabel?.font = UIFont.systemFont(ofSize: 14)
        button.layer.cornerRadius = 6
        button.addTarget(self, action: #selector(watchTrailer), for: .touchUpInside)
        return button
    }()

    
    var tableView: UITableView = {
        let tableView = UITableView()
        tableView.estimatedRowHeight = 120
        tableView.backgroundColor = .clear
        tableView.isSkeletonable = true
        tableView.rowHeight = UITableView.automaticDimension
        tableView.register(MovieReviewCell.self, forCellReuseIdentifier: "MovieReviewCell")
        return tableView
    }()
    
    var playerView: YTPlayerView = {
       let view = YTPlayerView()
        return view
    }()

    
    var presenter: DetailMoviePresenterInterface?

    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.backgroundColor = UIColor.backgroundColor()
        scrollView.delegate = self
        setupView()
        showSkeleton()
        
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        
        // Update the content size of the scroll view
        
        scrollView.contentSize = stackView.bounds.size
    }
    
    
    private func setupView() {
        tableView.delegate = self
        tableView.dataSource = self
        tableView.separatorColor = UIColor.white
        playerView.delegate = self
        
        view.addSubview(scrollView)
        view.addSubview(watchTrailerBtn)
        scrollView.addSubview(stackView)
        
        stackView.addSubview(imageBanner)
        
        stackView.addSubview(containerView)
        containerView.addSubview(titleLbl)
        containerView.addSubview(descLbl)
        containerView.addSubview(reviewLbl)
        
        stackView.addSubview(tableViewContainer)
        tableViewContainer.addSubview(tableView)
        
        reviewLbl.isHidden = false
        
        scrollView.snp.makeConstraints { make in
            make.top.bottom.left.right.equalToSuperview()
        }
        
        stackView.snp.makeConstraints { make in
            make.top.left.right.equalTo(scrollView.contentLayoutGuide)
            make.width.equalTo(scrollView.frameLayoutGuide)
            make.height.greaterThanOrEqualTo(scrollView.frameLayoutGuide)
        }
                
        containerView.snp.makeConstraints { make in
            make.width.equalTo(stackView)
            make.bottom.equalTo(tableViewContainer.snp.top).offset(-10)
            make.top.equalTo(imageBanner.snp.bottom)
        }
        
        titleLbl.snp.makeConstraints { make in
            make.left.equalTo(containerView.snp.left).offset(16)
            make.right.equalTo(containerView.snp.right).offset(-16)
            make.top.equalTo(containerView.snp.top).offset(12)
        }

        descLbl.snp.makeConstraints { make in
            make.left.equalTo(containerView.snp.left).offset(16)
            make.right.equalTo(containerView.snp.right).offset(-16)
            make.top.equalTo(titleLbl.snp.bottom).offset(8)
        }
        
        reviewLbl.snp.makeConstraints { make in
            make.top.equalTo(descLbl.snp.bottom).offset(40)
            make.left.equalTo(containerView.snp.left).offset(16)
            make.right.equalTo(containerView.snp.right).offset(-16)
            make.bottom.equalTo(containerView.snp.bottom)
        }
        
        imageBanner.snp.makeConstraints { make in
            make.top.left.right.equalTo(stackView)
            make.height.equalTo(600)
        }
        
        watchTrailerBtn.snp.makeConstraints { make in
            make.centerX.equalTo(imageBanner.snp.centerX)
            make.bottom.equalTo(imageBanner.snp.bottom).offset(-16)
            make.width.equalTo(100)
        }
        
        tableViewContainer.snp.makeConstraints { make in
            make.left.right.bottom.equalTo(stackView)
            make.height.equalTo(500)
            make.top.equalTo(containerView.snp.bottom).offset(10)
        }
        
        tableView.snp.makeConstraints { make in
            make.left.right.bottom.top.equalTo(tableViewContainer)
        }
    }
    
    @objc func watchTrailer() {
        view.addSubview(playerView)
        playerView.snp_makeConstraints { make in
            make.top.left.right.bottom.equalToSuperview()
        }
        
        playYouTubeVideo(videoID: presenter?.getTrailerURL() ?? "")
    }
    
    func showSkeleton() {
        descLbl.showGradientSkeleton(usingGradient: .init(baseColor: .darkClouds), animated: false, delay: 0 ,transition: .crossDissolve(0.25))
        imageBanner.showGradientSkeleton(usingGradient: .init(baseColor: .darkClouds), animated: false, delay: 0 ,transition: .crossDissolve(0.25))
        titleLbl.showGradientSkeleton(usingGradient: .init(baseColor: .darkClouds), animated: false, delay: 0 ,transition: .crossDissolve(0.25))
        tableView.showAnimatedGradientSkeleton(usingGradient: .init(baseColor: .darkClouds), animation: nil ,transition: .crossDissolve(0.25))
    }
    
    func stopSkeleton() {
        descLbl.stopSkeletonAnimation()
        descLbl.hideSkeleton()
        imageBanner.stopSkeletonAnimation()
        imageBanner.hideSkeleton()
        titleLbl.stopSkeletonAnimation()
        titleLbl.hideSkeleton()
        tableView.stopSkeletonAnimation()
        tableView.hideSkeleton()
    }
    
        
}


extension DetailMovieViewController: UIScrollViewDelegate, YTPlayerViewDelegate {
    
    func playYouTubeVideo(videoID: String) {
        let playerVars: [String: Any] = [
            "playsinline": 1
        ]
        playerView.load(withVideoId: videoID, playerVars: playerVars)
    }
    
    func playerViewDidBecomeReady(_ playerView: YTPlayerView) {
        playerView.playVideo()
    }
    
    func playerView(_ playerView: YTPlayerView, didChangeTo state: YTPlayerState) {
        
    }

}

extension DetailMovieViewController: DetailMovieViewInterface {
    func showAlert(message: String) {
        let alertController = UIAlertController(title: "Error", message: message, preferredStyle: .alert)

        let okAction = UIAlertAction(title: "OK", style: .default) { (_) in
            alertController.dismiss(animated: false)
        }

        alertController.addAction(okAction)
        
        self.present(alertController, animated: true, completion: nil)
    }

    
    func updateTableView() {
        guard let list = presenter?.getListReview() else { return }
        if list.count == 0 {
            reviewLbl.isHidden = true
        }
        tableView.reloadData()
    }
    
    func updateView() {
        stopSkeleton()
        let imageURL = presenter?.getImage()
        imageBanner.kf.setImage(with: imageURL)
        
        if let movie = presenter?.getMovieDetail() {
            titleLbl.text = movie.title
            descLbl.text = movie.overview
        }
  
    }
    
}

extension DetailMovieViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "MovieReviewCell", for: indexPath) as? MovieReviewCell else { return UITableViewCell() }
        guard let list = presenter?.getListReview() else { return cell }
        cell.updateCell(review: list[indexPath.row])
        cell.selectionStyle = .none
        return cell
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        // #warning Incomplete implementation, return the number of rows
        guard let list = presenter?.getListReview() else { return 0}
        return list.count
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        let page = presenter?.page ?? 1
        let totalPage = presenter?.getTotalPages() ?? 1
        
        guard page < totalPage else { return }
        guard let list = presenter?.getListReview() else { return }

        if indexPath.item == list.count - 2 {
            presenter?.addPage()
            presenter?.fetchListReview()
        }

    }
    
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        let offsetY = scrollView.contentOffset.y
        let threshold: CGFloat = 100 // Adjust this threshold as needed
        
        if offsetY > threshold {
            navigationController?.navigationBar.tintColor = UIColor.backgroundColor()
            navigationController?.navigationBar.titleTextAttributes = [NSAttributedString.Key.foregroundColor: UIColor.backgroundColor()]
        } else {
            navigationController?.navigationBar.tintColor = UIColor.white
            navigationController?.navigationBar.titleTextAttributes = [NSAttributedString.Key.foregroundColor: UIColor.white]
        }
    }
        
}
